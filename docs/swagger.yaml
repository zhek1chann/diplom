definitions:
  diploma_modules_auth_handler_model.ErrorResponse:
    properties:
      error:
        type: string
    type: object
  diploma_modules_auth_handler_model.LoginInput:
    properties:
      password:
        example: secure123
        type: string
      phone_number:
        example: "+123456789"
        type: string
    type: object
  diploma_modules_auth_handler_model.LoginResponse:
    properties:
      access_token:
        type: string
      refresh_token:
        type: string
    type: object
  diploma_modules_auth_handler_model.RegisterInput:
    properties:
      confirm_password:
        example: secure123
        type: string
      name:
        example: John Doe
        type: string
      password:
        example: secure123
        type: string
      phone_number:
        example: "+123456789"
        type: string
    type: object
  diploma_modules_auth_handler_model.RegisterResponse:
    properties:
      id:
        example: 1
        type: integer
    type: object
  diploma_modules_cart_handler_model.AddProductToCardResponse:
    properties:
      status:
        type: string
    type: object
  diploma_modules_cart_handler_model.AddProductToCartInput:
    properties:
      product_id:
        type: integer
      quantity:
        type: integer
      supplier_id:
        type: integer
    type: object
  diploma_modules_cart_handler_model.CheckoutResponse:
    properties:
      checkout_url:
        type: string
    type: object
  diploma_modules_cart_handler_model.ErrorResponse:
    properties:
      error:
        type: string
    type: object
  diploma_modules_cart_handler_model.GetCartResponse:
    properties:
      customer_id:
        type: integer
      suppliers:
        items:
          $ref: '#/definitions/diploma_modules_cart_handler_model.Supplier'
        type: array
      total:
        type: integer
    type: object
  diploma_modules_cart_handler_model.Product:
    properties:
      id:
        type: integer
      image:
        type: string
      name:
        type: string
      price:
        type: integer
      quantity:
        type: integer
    type: object
  diploma_modules_cart_handler_model.Supplier:
    properties:
      delivery_fee:
        type: integer
      free_delivery_amount:
        type: integer
      id:
        type: integer
      name:
        type: string
      orderAmount:
        type: integer
      product_list:
        items:
          $ref: '#/definitions/diploma_modules_cart_handler_model.Product'
        type: array
      total_amount:
        type: integer
    type: object
  diploma_modules_order_handler_model.CancelOrderRequest:
    properties:
      order_id:
        type: integer
    required:
    - order_id
    type: object
  diploma_modules_order_handler_model.ErrorResponse:
    properties:
      error:
        type: string
    type: object
  diploma_modules_order_handler_model.GetOrdersResponse:
    properties:
      orders:
        items:
          $ref: '#/definitions/diploma_modules_order_handler_model.Order'
        type: array
    type: object
  diploma_modules_order_handler_model.Order:
    properties:
      id:
        type: integer
      order_date:
        type: string
      product_list:
        items:
          $ref: '#/definitions/diploma_modules_order_handler_model.Product'
        type: array
      status:
        type: string
      supplier:
        $ref: '#/definitions/diploma_modules_order_handler_model.Supplier'
    type: object
  diploma_modules_order_handler_model.Product:
    properties:
      id:
        type: integer
      image:
        type: string
      name:
        type: string
      price:
        type: integer
      quantity:
        type: integer
    type: object
  diploma_modules_order_handler_model.Supplier:
    properties:
      id:
        type: integer
      name:
        type: string
    type: object
  diploma_modules_order_handler_model.UpdateOrderStatusRequest:
    properties:
      new_status_id:
        type: integer
      order_id:
        type: integer
    required:
    - new_status_id
    - order_id
    type: object
  diploma_modules_product_handler_model.DetailedProduct:
    properties:
      product:
        $ref: '#/definitions/diploma_modules_product_handler_model.Product'
      suppliers:
        items:
          $ref: '#/definitions/diploma_modules_product_handler_model.ProductSupplier'
        type: array
    type: object
  diploma_modules_product_handler_model.ErrorResponse:
    properties:
      error:
        type: string
    type: object
  diploma_modules_product_handler_model.Product:
    properties:
      id:
        type: integer
      imageUrl:
        type: string
      lowest_product_supplier:
        $ref: '#/definitions/diploma_modules_product_handler_model.ProductSupplier'
      name:
        type: string
    type: object
  diploma_modules_product_handler_model.ProductListResponse:
    properties:
      product_list:
        items:
          $ref: '#/definitions/diploma_modules_product_handler_model.Product'
        type: array
      total:
        type: integer
    type: object
  diploma_modules_product_handler_model.ProductResponse:
    properties:
      product:
        $ref: '#/definitions/diploma_modules_product_handler_model.DetailedProduct'
    type: object
  diploma_modules_product_handler_model.ProductSupplier:
    properties:
      price:
        type: integer
      sell_amount:
        type: integer
      supplier:
        $ref: '#/definitions/diploma_modules_product_handler_model.Supplier'
    type: object
  diploma_modules_product_handler_model.Supplier:
    properties:
      delivery_fee:
        type: integer
      free_delivery_amount:
        type: integer
      id:
        type: integer
      name:
        type: string
      order_amount:
        type: integer
    type: object
  diploma_modules_user_handler_model.Address:
    properties:
      description:
        type: string
      street:
        type: string
    type: object
  diploma_modules_user_handler_model.ErrorResponse:
    properties:
      error:
        type: string
    type: object
  diploma_modules_user_handler_model.GetAddressResponse:
    properties:
      address_list:
        items:
          $ref: '#/definitions/diploma_modules_user_handler_model.Address'
        type: array
    type: object
  diploma_modules_user_handler_model.GetUserProfileResponse:
    properties:
      user:
        $ref: '#/definitions/diploma_modules_user_handler_model.User'
    type: object
  diploma_modules_user_handler_model.SetAddressInput:
    properties:
      address:
        $ref: '#/definitions/diploma_modules_user_handler_model.Address'
    type: object
  diploma_modules_user_handler_model.UpdateUserProfileRequest:
    properties:
      name:
        type: string
      phone_number:
        type: string
    type: object
  diploma_modules_user_handler_model.User:
    properties:
      address:
        $ref: '#/definitions/diploma_modules_user_handler_model.Address'
      id:
        type: integer
      name:
        type: string
      phone_number:
        type: string
    type: object
  gin.H:
    additionalProperties: {}
    type: object
info:
  contact: {}
  description: This is a sample server with JWT authorization.
  title: Go JWT Swagger Example API
  version: "1.0"
paths:
  /api/auth/login:
    post:
      consumes:
      - application/json
      description: Login user and return tokens
      parameters:
      - description: Login input
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/diploma_modules_auth_handler_model.LoginInput'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/diploma_modules_auth_handler_model.LoginResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/diploma_modules_auth_handler_model.ErrorResponse'
      summary: User login
      tags:
      - auth
  /api/auth/register:
    post:
      consumes:
      - application/json
      description: Register a new user
      parameters:
      - description: Register input
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/diploma_modules_auth_handler_model.RegisterInput'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/diploma_modules_auth_handler_model.RegisterResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/diploma_modules_auth_handler_model.ErrorResponse'
      summary: User registration
      tags:
      - auth
  /api/cart:
    get:
      consumes:
      - application/json
      description: --
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/diploma_modules_cart_handler_model.GetCartResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/diploma_modules_cart_handler_model.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: get cart
      tags:
      - cart
  /api/cart/add:
    post:
      consumes:
      - application/json
      description: --
      parameters:
      - description: Put Card input
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/diploma_modules_cart_handler_model.AddProductToCartInput'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/diploma_modules_cart_handler_model.AddProductToCardResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/diploma_modules_cart_handler_model.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Put product to Card
      tags:
      - cart
  /api/cart/checkout:
    post:
      consumes:
      - application/json
      description: Processes the checkout of the authenticated user's cart.
      produces:
      - application/json
      responses:
        "200":
          description: Checkout status
          schema:
            $ref: '#/definitions/diploma_modules_cart_handler_model.CheckoutResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/diploma_modules_cart_handler_model.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/diploma_modules_cart_handler_model.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Process checkout operation
      tags:
      - cart
  /api/cart/clear:
    delete:
      consumes:
      - application/json
      description: Deletes all products from the user's cart
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/diploma_modules_cart_handler_model.AddProductToCardResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/diploma_modules_cart_handler_model.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/diploma_modules_cart_handler_model.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Clear cart
      tags:
      - cart
  /api/cart/delete:
    delete:
      consumes:
      - application/json
      description: Deletes given quantity of product by product_id and supplier_id
        from cart
      parameters:
      - description: Product ID
        in: query
        name: product_id
        required: true
        type: integer
      - description: Supplier ID
        in: query
        name: supplier_id
        required: true
        type: integer
      - description: Quantity to delete (default 1)
        in: query
        name: quantity
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - ApiKeyAuth: []
      summary: Delete product from cart
      tags:
      - cart
  /api/order:
    get:
      consumes:
      - application/json
      description: Retrieves orders for the authenticated user using the provided
        JWT claims.
      produces:
      - application/json
      responses:
        "200":
          description: List of orders
          schema:
            items:
              $ref: '#/definitions/diploma_modules_order_handler_model.GetOrdersResponse'
            type: array
        "401":
          description: 'Unauthorized: invalid or missing JWT token'
          schema:
            $ref: '#/definitions/diploma_modules_order_handler_model.ErrorResponse'
        "500":
          description: Internal server error while retrieving orders
          schema:
            $ref: '#/definitions/diploma_modules_order_handler_model.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Retrieve orders for a user
      tags:
      - orders
  /api/order/{id}:
    get:
      consumes:
      - application/json
      description: Retrieves an order by its ID.
      parameters:
      - description: Order ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Order details
          schema:
            $ref: '#/definitions/diploma_modules_order_handler_model.Order'
        "400":
          description: Invalid order ID
          schema:
            $ref: '#/definitions/diploma_modules_order_handler_model.ErrorResponse'
        "401":
          description: 'Unauthorized: invalid or missing JWT token'
          schema:
            $ref: '#/definitions/diploma_modules_order_handler_model.ErrorResponse'
        "500":
          description: Internal server error while retrieving order
          schema:
            $ref: '#/definitions/diploma_modules_order_handler_model.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Get order by ID
      tags:
      - orders
  /api/order/cancel:
    post:
      consumes:
      - application/json
      description: Allows a customer to cancel their own order only if it's in Pending
        status.
      parameters:
      - description: Order ID to cancel
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/diploma_modules_order_handler_model.CancelOrderRequest'
      produces:
      - application/json
      responses:
        "200":
          description: order cancelled
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Invalid input or bad request
          schema:
            $ref: '#/definitions/diploma_modules_order_handler_model.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/diploma_modules_order_handler_model.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/diploma_modules_order_handler_model.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/diploma_modules_order_handler_model.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Cancel order by customer
      tags:
      - orders
  /api/order/status:
    post:
      consumes:
      - application/json
      description: Supplier updates the status of their order
      parameters:
      - description: Order ID and New Status
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/diploma_modules_order_handler_model.UpdateOrderStatusRequest'
      produces:
      - application/json
      responses:
        "200":
          description: status updated
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Invalid input
          schema:
            $ref: '#/definitions/diploma_modules_order_handler_model.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/diploma_modules_order_handler_model.ErrorResponse'
        "500":
          description: Internal error
          schema:
            $ref: '#/definitions/diploma_modules_order_handler_model.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Update order status by supplier
      tags:
      - orders
  /api/product/{id}:
    get:
      consumes:
      - application/json
      description: Retrieve product information by its ID
      parameters:
      - description: Product ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/diploma_modules_product_handler_model.ProductResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/diploma_modules_product_handler_model.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/diploma_modules_product_handler_model.ErrorResponse'
      summary: Get product by ID
      tags:
      - product
  /api/product/list:
    get:
      consumes:
      - application/json
      description: Retrieve a list of products with pagination support using limit
        and offset
      parameters:
      - description: Limit number of products
        in: query
        name: limit
        type: integer
      - description: Offset for pagination
        in: query
        name: offset
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/diploma_modules_product_handler_model.ProductListResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/diploma_modules_product_handler_model.ErrorResponse'
      summary: Get product list
      tags:
      - product
  /api/user/address:
    get:
      description: Retrieve address list for a user
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/diploma_modules_user_handler_model.GetAddressResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/diploma_modules_user_handler_model.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/diploma_modules_user_handler_model.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Get address
      tags:
      - user
    post:
      consumes:
      - application/json
      description: --
      parameters:
      - description: something
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/diploma_modules_user_handler_model.SetAddressInput'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/gin.H'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/diploma_modules_user_handler_model.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Set address
      tags:
      - user
  /api/user/profile:
    get:
      description: Fetch the authenticated user's profile
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/diploma_modules_user_handler_model.GetUserProfileResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/diploma_modules_user_handler_model.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Get user profile
      tags:
      - user
    put:
      consumes:
      - application/json
      description: Update the authenticated user's profile
      parameters:
      - description: Update Profile Request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/diploma_modules_user_handler_model.UpdateUserProfileRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/diploma_modules_user_handler_model.GetUserProfileResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/diploma_modules_user_handler_model.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/diploma_modules_user_handler_model.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/diploma_modules_user_handler_model.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Update user profile
      tags:
      - user
securityDefinitions:
  ApiKeyAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
