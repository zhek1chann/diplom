package main

import (
	"encoding/json"
	"fmt"
	"log"
	"os"
	"strings"
	"time"

	"github.com/jmoiron/sqlx"
	_ "github.com/lib/pq"
	"golang.org/x/crypto/bcrypt"
)

// ========================================
// –°—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö
// ========================================

// DeliveryCondition structure for delivery_conditions.json
type DeliveryCondition struct {
	ConditionID               int     `json:"condition_id"`
	MinimumFreeDeliveryAmount float64 `json:"minimum_free_delivery_amount"`
	DeliveryFee               float64 `json:"delivery_fee"`
}

// Supplier structure for suppliers.json (–±–∞–∑–æ–≤—ã–µ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∏)
type Supplier struct {
	UserID      int    `json:"user_id"`
	Name        string `json:"name"`
	ConditionID int    `json:"condition_id"`
}

// ExtendedSupplier structure –¥–ª—è —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã—Ö –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤
type ExtendedSupplier struct {
	UserID      int    `json:"user_id"`
	Name        string `json:"name"`
	ConditionID int    `json:"condition_id"`
	Email       string `json:"email,omitempty"`
	Phone       string `json:"phone,omitempty"`
	Address     string `json:"address,omitempty"`
	TIN         string `json:"tin,omitempty"`
}

// Product structure for products.json (–±–∞–∑–æ–≤—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã)
type Product struct {
	ID         int    `json:"id"`
	Name       string `json:"name"`
	ImageURL   string `json:"image_url"`
	GTIN       int64  `json:"gtin"`
	MinPrice   int    `json:"min_price"`
	SupplierID int    `json:"supplier_id"`
}

// EnhancedProduct structure –¥–ª—è —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤
type EnhancedProduct struct {
	ID                int    `json:"id"`
	Name              string `json:"name"`
	ImageURL          string `json:"image_url"`
	GTIN              string `json:"gtin"`
	MinPrice          int    `json:"min_price"`
	CategoryID        int    `json:"category_id"`
	SubcategoryID     int    `json:"subcategory_id"`
	Brand             string `json:"brand"`
	Weight            string `json:"weight"`
	CountryOrigin     string `json:"country_origin"`
	ShelfLifeDays     int    `json:"shelf_life_days"`
	StorageConditions string `json:"storage_conditions"`
	CreatedAt         string `json:"created_at"`
	UpdatedAt         string `json:"updated_at"`
	SupplierID        int    `json:"supplier_id"`
}

// ProductSupplier structure for products_supplier.json
type ProductSupplier struct {
	ProductID     int `json:"product_id"`
	SupplierID    int `json:"supplier_id"`
	Price         int `json:"price"`
	MinSellAmount int `json:"min_sell_amount"`
}

// Category structure –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π
type Category struct {
	ID            int           `json:"id"`
	Name          string        `json:"name"`
	Description   string        `json:"description"`
	Subcategories []Subcategory `json:"subcategories"`
}

// Subcategory structure –¥–ª—è –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–π
type Subcategory struct {
	ID         int    `json:"id"`
	Name       string `json:"name"`
	CategoryID int    `json:"category_id"`
}

// PriceHistory structure –¥–ª—è –∏—Å—Ç–æ—Ä–∏–∏ —Ü–µ–Ω
type PriceHistory struct {
	ID           int    `json:"id"`
	ProductID    int    `json:"product_id"`
	SupplierID   int    `json:"supplier_id"`
	Price        int    `json:"price"`
	Date         string `json:"date"`
	ChangeReason string `json:"change_reason"`
}

// ========================================
// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
// ========================================

func generatePhoneNumber(userID int) string {
	// –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–µ–ª–µ—Ñ–æ–Ω –∫–∞–∑–∞—Ö—Å—Ç–∞–Ω—Å–∫–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞ +7XXXXXXXXX (12 —Å–∏–º–≤–æ–ª–æ–≤ –º–∞–∫—Å–∏–º—É–º)
	return fmt.Sprintf("+7%09d", userID%1000000000)
}

func generateHashedPassword() (string, error) {
	const password = "password1@"
	hashedPassword, err := bcrypt.GenerateFromPassword([]byte(password), bcrypt.DefaultCost)
	if err != nil {
		return "", err
	}
	return string(hashedPassword), nil
}

func generateOrderAmountByIndex(index int) int {
	orderAmounts := []int{30000, 50000, 70000, 100000, 150000}
	return orderAmounts[index%len(orderAmounts)]
}

func loadJSON(fileName string, data interface{}) error {
	file, err := os.Open(fileName)
	if err != nil {
		return fmt.Errorf("–Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å —Ñ–∞–π–ª %s: %v", fileName, err)
	}
	defer file.Close()

	decoder := json.NewDecoder(file)
	if err := decoder.Decode(&data); err != nil {
		return fmt.Errorf("–Ω–µ —É–¥–∞–ª–æ—Å—å –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞—Ç—å JSON –∏–∑ %s: %v", fileName, err)
	}
	return nil
}

func fileExists(filename string) bool {
	_, err := os.Stat(filename)
	return !os.IsNotExist(err)
}

// ========================================
// –§—É–Ω–∫—Ü–∏–∏ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö
// ========================================

func loadDeliveryConditions(db *sqlx.DB) error {
	fmt.Println("üì¶ –ó–∞–≥—Ä—É–∂–∞–µ–º —É—Å–ª–æ–≤–∏—è –¥–æ—Å—Ç–∞–≤–∫–∏...")

	deliveryConditions := []DeliveryCondition{}
	if err := loadJSON("delivery_conditions.json", &deliveryConditions); err != nil {
		return err
	}

	for _, condition := range deliveryConditions {
		_, err := db.Exec(`
			INSERT INTO delivery_conditions (condition_id, minimum_free_delivery_amount, delivery_fee)
			VALUES ($1, $2, $3)
			ON CONFLICT (condition_id) DO UPDATE SET 
				minimum_free_delivery_amount = $2, delivery_fee = $3`,
			condition.ConditionID, condition.MinimumFreeDeliveryAmount, condition.DeliveryFee)
		if err != nil {
			return fmt.Errorf("–æ—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —É—Å–ª–æ–≤–∏–π –¥–æ—Å—Ç–∞–≤–∫–∏: %v", err)
		}
	}

	fmt.Printf("‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ %d —É—Å–ª–æ–≤–∏–π –¥–æ—Å—Ç–∞–≤–∫–∏\n", len(deliveryConditions))
	return nil
}

func loadCategories(db *sqlx.DB) error {
	if !fileExists("categories.json") {
		fmt.Println("‚ö†Ô∏è  –§–∞–π–ª categories.json –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º...")
		return nil
	}

	fmt.Println("üìÇ –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏...")

	categories := []Category{}
	if err := loadJSON("categories.json", &categories); err != nil {
		return err
	}

	for _, category := range categories {
		_, err := db.Exec(`
			INSERT INTO categories (id, name, description) 
			VALUES ($1, $2, $3) 
			ON CONFLICT (id) DO UPDATE SET name = $2, description = $3`,
			category.ID, category.Name, category.Description)
		if err != nil {
			return fmt.Errorf("–æ—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ %d: %v", category.ID, err)
		}

		for _, subcategory := range category.Subcategories {
			_, err := db.Exec(`
				INSERT INTO subcategories (id, category_id, name) 
				VALUES ($1, $2, $3) 
				ON CONFLICT (id) DO UPDATE SET category_id = $2, name = $3`,
				subcategory.ID, subcategory.CategoryID, subcategory.Name)
			if err != nil {
				return fmt.Errorf("–æ—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏ %d: %v", subcategory.ID, err)
			}
		}
	}

	fmt.Printf("‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ %d –∫–∞—Ç–µ–≥–æ—Ä–∏–π\n", len(categories))
	return nil
}

func loadBasicSuppliers(db *sqlx.DB) error {
	fmt.Println("üè™ –ó–∞–≥—Ä—É–∂–∞–µ–º –±–∞–∑–æ–≤—ã—Ö –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤...")

	suppliers := []Supplier{}
	if err := loadJSON("suppliers.json", &suppliers); err != nil {
		return err
	}

	for i, supplier := range suppliers {
		phoneNumber := generatePhoneNumber(supplier.UserID)
		hashedPassword, err := generateHashedPassword()
		if err != nil {
			return fmt.Errorf("–æ—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–∞—Ä–æ–ª—è: %v", err)
		}

		_, err = db.Exec(`
			INSERT INTO users (id, name, phone_number, hashed_password, role) 
			VALUES ($1, $2, $3, $4, 1)
			ON CONFLICT (id) DO UPDATE SET name = $2, phone_number = $3`,
			supplier.UserID, supplier.Name, phoneNumber, hashedPassword)
		if err != nil {
			return fmt.Errorf("–æ—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è %d: %v", supplier.UserID, err)
		}

		orderAmount := generateOrderAmountByIndex(i)
		_, err = db.Exec(`
			INSERT INTO suppliers (user_id, condition_id, name, order_amount) 
			VALUES ($1, $2, $3, $4)
			ON CONFLICT (user_id) DO UPDATE SET 
				condition_id = $2, name = $3, order_amount = $4`,
			supplier.UserID, supplier.ConditionID, supplier.Name, orderAmount)
		if err != nil {
			return fmt.Errorf("–æ—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ %d: %v", supplier.UserID, err)
		}
	}

	fmt.Printf("‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ %d –±–∞–∑–æ–≤—ã—Ö –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤\n", len(suppliers))
	return nil
}

func loadExtendedSuppliers(db *sqlx.DB) error {
	if !fileExists("extended_suppliers.json") {
		fmt.Println("‚ö†Ô∏è  –§–∞–π–ª extended_suppliers.json –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º...")
		return nil
	}

	fmt.Println("üè™ –ó–∞–≥—Ä—É–∂–∞–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã—Ö –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤...")

	extendedSuppliers := []ExtendedSupplier{}
	if err := loadJSON("extended_suppliers.json", &extendedSuppliers); err != nil {
		return err
	}

	for i, supplier := range extendedSuppliers {
		phoneNumber := generatePhoneNumber(supplier.UserID)
		hashedPassword, err := generateHashedPassword()
		if err != nil {
			return fmt.Errorf("–æ—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–∞—Ä–æ–ª—è: %v", err)
		}

		_, err = db.Exec(`
			INSERT INTO users (id, name, phone_number, hashed_password, role) 
			VALUES ($1, $2, $3, $4, 1)
			ON CONFLICT (id) DO UPDATE SET name = $2, phone_number = $3`,
			supplier.UserID, supplier.Name, phoneNumber, hashedPassword)
		if err != nil {
			return fmt.Errorf("–æ—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è %d: %v", supplier.UserID, err)
		}

		orderAmount := generateOrderAmountByIndex(i)
		_, err = db.Exec(`
			INSERT INTO suppliers (user_id, condition_id, name, order_amount) 
			VALUES ($1, $2, $3, $4)
			ON CONFLICT (user_id) DO UPDATE SET 
				condition_id = $2, name = $3, order_amount = $4`,
			supplier.UserID, supplier.ConditionID, supplier.Name, orderAmount)
		if err != nil {
			return fmt.Errorf("–æ—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ %d: %v", supplier.UserID, err)
		}
	}

	fmt.Printf("‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ %d —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã—Ö –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤\n", len(extendedSuppliers))
	return nil
}

func loadBasicProducts(db *sqlx.DB) error {
	fmt.Println("üì¶ –ó–∞–≥—Ä—É–∂–∞–µ–º –±–∞–∑–æ–≤—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã...")

	products := []Product{}
	if err := loadJSON("products.json", &products); err != nil {
		return err
	}

	for _, product := range products {
		_, err := db.Exec(`
			INSERT INTO products (id, name, image_url, gtin)
			VALUES ($1, $2, $3, $4)
			ON CONFLICT (id) DO UPDATE SET 
				name = $2, image_url = $3, gtin = $4`,
			product.ID, product.Name, product.ImageURL, product.GTIN)
		if err != nil {
			return fmt.Errorf("–æ—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞ %d: %v", product.ID, err)
		}
	}

	fmt.Printf("‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ %d –±–∞–∑–æ–≤—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤\n", len(products))
	return nil
}

func loadEnhancedProducts(db *sqlx.DB) error {
	fmt.Println("üì¶ –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–¥—É–∫—Ç—ã —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏...")

	// –ó–∞–≥—Ä—É–∂–∞–µ–º products_enhanced.json –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö
	if fileExists("products_enhanced.json") {
		enhancedProducts := []EnhancedProduct{}
		if err := loadJSON("products_enhanced.json", &enhancedProducts); err != nil {
			return err
		}

		for _, product := range enhancedProducts {
			createdAt, _ := time.Parse("2006-01-02T15:04:05Z", product.CreatedAt)
			updatedAt, _ := time.Parse("2006-01-02T15:04:05Z", product.UpdatedAt)

			_, err := db.Exec(`
				UPDATE products SET 
					category_id = $2, 
					subcategory_id = $3,
					created_at = $4,
					updated_at = $5
				WHERE id = $1`,
				product.ID, product.CategoryID, product.SubcategoryID,
				createdAt, updatedAt)
			if err != nil {
				fmt.Printf("‚ö†Ô∏è  –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –ø—Ä–æ–¥—É–∫—Ç %d: %v\n", product.ID, err)
			}
		}
		fmt.Printf("‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ %d –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏\n", len(enhancedProducts))
	}

	// –ó–∞–≥—Ä—É–∂–∞–µ–º extended_products.json –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤—ã—Ö
	if fileExists("extended_products.json") {
		extendedProducts := []EnhancedProduct{}
		if err := loadJSON("extended_products.json", &extendedProducts); err != nil {
			return err
		}

		for _, product := range extendedProducts {
			createdAt, _ := time.Parse("2006-01-02T15:04:05Z", product.CreatedAt)
			updatedAt, _ := time.Parse("2006-01-02T15:04:05Z", product.UpdatedAt)

			_, err := db.Exec(`
				INSERT INTO products (id, name, image_url, gtin, category_id, subcategory_id, created_at, updated_at)
				VALUES ($1, $2, $3, $4, $5, $6, $7, $8)
				ON CONFLICT (id) DO UPDATE SET 
					name = $2, image_url = $3, gtin = $4, 
					category_id = $5, subcategory_id = $6, updated_at = $8`,
				product.ID, product.Name, product.ImageURL, product.GTIN,
				product.CategoryID, product.SubcategoryID, createdAt, updatedAt)
			if err != nil {
				return fmt.Errorf("–æ—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞ %d: %v", product.ID, err)
			}
		}
		fmt.Printf("‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ %d –Ω–æ–≤—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤\n", len(extendedProducts))
	}

	return nil
}

func loadProductSuppliers(db *sqlx.DB) error {
	fmt.Println("üí∞ –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–≤—è–∑–∏ –ø—Ä–æ–¥—É–∫—Ç-–ø–æ—Å—Ç–∞–≤—â–∏–∫...")

	productSuppliers := []ProductSupplier{}
	if err := loadJSON("products_supplier.json", &productSuppliers); err != nil {
		return err
	}

	successCount := 0
	for _, ps := range productSuppliers {
		_, err := db.Exec(`
			INSERT INTO products_supplier (product_id, supplier_id, price, sell_amount)
			VALUES ($1, $2, $3, $4)
			ON CONFLICT (product_id, supplier_id) DO UPDATE SET 
				price = $3, sell_amount = $4`,
			ps.ProductID, ps.SupplierID, ps.Price, ps.MinSellAmount)
		if err != nil {
			fmt.Printf("‚ö†Ô∏è  –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: –Ω–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å —Å–≤—è–∑—å –ø—Ä–æ–¥—É–∫—Ç %d - –ø–æ—Å—Ç–∞–≤—â–∏–∫ %d: %v\n",
				ps.ProductID, ps.SupplierID, err)
		} else {
			successCount++
		}
	}

	fmt.Printf("‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ %d —Å–≤—è–∑–µ–π –ø—Ä–æ–¥—É–∫—Ç-–ø–æ—Å—Ç–∞–≤—â–∏–∫\n", successCount)
	return nil
}

func loadPriceHistory(db *sqlx.DB) error {
	fmt.Println("üìà –ó–∞–≥—Ä—É–∂–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é —Ü–µ–Ω...")

	totalLoaded := 0

	// –ó–∞–≥—Ä—É–∂–∞–µ–º –±–∞–∑–æ–≤—É—é –∏—Å—Ç–æ—Ä–∏—é —Ü–µ–Ω
	if fileExists("price_history.json") {
		priceHistory := []PriceHistory{}
		if err := loadJSON("price_history.json", &priceHistory); err != nil {
			return err
		}

		for _, history := range priceHistory {
			date, _ := time.Parse("2006-01-02T15:04:05Z", history.Date)

			_, err := db.Exec(`
				INSERT INTO price_history (id, product_id, supplier_id, price, date, change_reason)
				VALUES ($1, $2, $3, $4, $5, $6)
				ON CONFLICT (id) DO UPDATE SET 
					product_id = $2, supplier_id = $3, price = $4, date = $5, change_reason = $6`,
				history.ID, history.ProductID, history.SupplierID,
				history.Price, date, history.ChangeReason)
			if err != nil {
				fmt.Printf("‚ö†Ô∏è  –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: –Ω–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –∑–∞–ø–∏—Å—å –∏—Å—Ç–æ—Ä–∏–∏ %d: %v\n", history.ID, err)
			} else {
				totalLoaded++
			}
		}
	}

	// –ó–∞–≥—Ä—É–∂–∞–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—É—é –∏—Å—Ç–æ—Ä–∏—é —Ü–µ–Ω
	if fileExists("extended_price_history.json") {
		extendedPriceHistory := []PriceHistory{}
		if err := loadJSON("extended_price_history.json", &extendedPriceHistory); err != nil {
			return err
		}

		for _, history := range extendedPriceHistory {
			date, _ := time.Parse("2006-01-02T15:04:05Z", history.Date)

			_, err := db.Exec(`
				INSERT INTO price_history (id, product_id, supplier_id, price, date, change_reason)
				VALUES ($1, $2, $3, $4, $5, $6)
				ON CONFLICT (id) DO UPDATE SET 
					product_id = $2, supplier_id = $3, price = $4, date = $5, change_reason = $6`,
				history.ID, history.ProductID, history.SupplierID,
				history.Price, date, history.ChangeReason)
			if err != nil {
				fmt.Printf("‚ö†Ô∏è  –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: –Ω–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –∑–∞–ø–∏—Å—å –∏—Å—Ç–æ—Ä–∏–∏ %d: %v\n", history.ID, err)
			} else {
				totalLoaded++
			}
		}
	}

	if totalLoaded == 0 {
		fmt.Println("‚ö†Ô∏è  –§–∞–π–ª—ã –∏—Å—Ç–æ—Ä–∏–∏ —Ü–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º...")
	} else {
		fmt.Printf("‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ %d –∑–∞–ø–∏—Å–µ–π –∏—Å—Ç–æ—Ä–∏–∏ —Ü–µ–Ω\n", totalLoaded)
	}
	return nil
}

func updateProductPrices(db *sqlx.DB) error {
	fmt.Println("üîÑ –û–±–Ω–æ–≤–ª—è–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ —Ü–µ–Ω—ã –ø—Ä–æ–¥—É–∫—Ç–æ–≤...")

	rows, err := db.Query(`
		SELECT ps.product_id, ps.price AS lowest_price, ps.supplier_id
		FROM products_supplier ps
		WHERE ps.price = (
			SELECT MIN(price)
			FROM products_supplier
			WHERE product_id = ps.product_id
		)
		GROUP BY ps.product_id, ps.supplier_id, ps.price;
	`)
	if err != nil {
		return fmt.Errorf("–æ—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω—ã—Ö —Ü–µ–Ω: %v", err)
	}
	defer rows.Close()

	updateCount := 0
	updateQuery := `UPDATE products SET lowest_price = $1, lowest_supplier_id = $2 WHERE id = $3`

	for rows.Next() {
		var productID, lowestPrice, lowestSupplierID int

		if err := rows.Scan(&productID, &lowestPrice, &lowestSupplierID); err != nil {
			return fmt.Errorf("–æ—à–∏–±–∫–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Ç—Ä–æ–∫–∏: %v", err)
		}

		_, err := db.Exec(updateQuery, lowestPrice, lowestSupplierID, productID)
		if err != nil {
			fmt.Printf("‚ö†Ô∏è  –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Ü–µ–Ω—É –ø—Ä–æ–¥—É–∫—Ç–∞ %d: %v\n", productID, err)
		} else {
			updateCount++
		}
	}

	if err := rows.Err(); err != nil {
		return fmt.Errorf("–æ—à–∏–±–∫–∞ –∏—Ç–µ—Ä–∞—Ü–∏–∏ —Å—Ç—Ä–æ–∫: %v", err)
	}

	fmt.Printf("‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ %d –º–∏–Ω–∏–º–∞–ª—å–Ω—ã—Ö —Ü–µ–Ω\n", updateCount)
	return nil
}

// ========================================
// –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
// ========================================

func main() {
	fmt.Println("üöÄ –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∫–∞—Ç–∞–ª–æ–≥–∞ –≤ PostgreSQL")
	fmt.Println(strings.Repeat("=", 60))

	// –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
	connStr := "host=localhost port=5432 dbname=catalog user=note-user password=note-password sslmode=disable"
	db, err := sqlx.Connect("postgres", connStr)
	if err != nil {
		log.Fatalf("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î: %v", err)
	}
	defer db.Close()

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
	if err := db.Ping(); err != nil {
		log.Fatalf("‚ùå –û—à–∏–±–∫–∞ ping –ë–î: %v", err)
	}
	fmt.Println("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")

	// –≠—Ç–∞–ø—ã –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö
	steps := []struct {
		name string
		fn   func(*sqlx.DB) error
	}{
		{"–£—Å–ª–æ–≤–∏—è –¥–æ—Å—Ç–∞–≤–∫–∏", loadDeliveryConditions},
		{"–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏", loadCategories},
		{"–ë–∞–∑–æ–≤—ã–µ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∏", loadBasicSuppliers},
		{"–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∏", loadExtendedSuppliers},
		{"–ë–∞–∑–æ–≤—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã", loadBasicProducts},
		{"–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã", loadEnhancedProducts},
		{"–°–≤—è–∑–∏ –ø—Ä–æ–¥—É–∫—Ç-–ø–æ—Å—Ç–∞–≤—â–∏–∫", loadProductSuppliers},
		{"–ò—Å—Ç–æ—Ä–∏—è —Ü–µ–Ω", loadPriceHistory},
		{"–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–∏–Ω–∏–º–∞–ª—å–Ω—ã—Ö —Ü–µ–Ω", updateProductPrices},
	}

	// –í—ã–ø–æ–ª–Ω—è–µ–º –∫–∞–∂–¥—ã–π —ç—Ç–∞–ø
	for i, step := range steps {
		fmt.Printf("\nüìã –≠—Ç–∞–ø %d/%d: %s\n", i+1, len(steps), step.name)
		if err := step.fn(db); err != nil {
			log.Fatalf("‚ùå –û—à–∏–±–∫–∞ –Ω–∞ —ç—Ç–∞–ø–µ '%s': %v", step.name, err)
		}
	}

	fmt.Println("\n" + strings.Repeat("=", 60))
	fmt.Println("üéâ –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
	fmt.Println("\nüìä –ß—Ç–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ:")
	fmt.Println("   ‚úÖ –£—Å–ª–æ–≤–∏—è –¥–æ—Å—Ç–∞–≤–∫–∏")
	fmt.Println("   ‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω—ã)")
	fmt.Println("   ‚úÖ –ü–æ—Å—Ç–∞–≤—â–∏–∫–∏ (–±–∞–∑–æ–≤—ã–µ + —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ)")
	fmt.Println("   ‚úÖ –ü—Ä–æ–¥—É–∫—Ç—ã (–±–∞–∑–æ–≤—ã–µ + —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ)")
	fmt.Println("   ‚úÖ –°–≤—è–∑–∏ –ø—Ä–æ–¥—É–∫—Ç-–ø–æ—Å—Ç–∞–≤—â–∏–∫ —Å —Ü–µ–Ω–∞–º–∏")
	fmt.Println("   ‚úÖ –ò—Å—Ç–æ—Ä–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π —Ü–µ–Ω (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–∞)")
	fmt.Println("   ‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Ä–∞—Å—á–µ—Ç –º–∏–Ω–∏–º–∞–ª—å–Ω—ã—Ö —Ü–µ–Ω")

	fmt.Println("\nüöÄ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –≥–æ—Ç–æ–≤–∞ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é!")
}
